---
# Preety Print the  
trigger:
  branches:
    include:
      - main

  tags:
    include:
      - '*'

parameters:
- name: trigger_type
  displayName: Select trigger type
  type: string
  default: CI
  values:
  - CI
  - Release
  - EOS
- name: sprint_number
  displayName: Sprint Number
  type: string
  default: " "

variables:
- name: buildTimeStamp # will be set by script
- name: buildNum

stages:

- stage: Initialize
  pool: 
   name: Azure-GitHub
   demands:
    - agent.name -equals AZ-GH
  jobs:
  - job: Checkout
    timeoutInMinutes: 0
    displayName: 'Checkout'
    steps:
    - checkout: self 
      clean: true

  condition: and(succeeded(), eq(variables['DeployFlag'], 'true'))
  pool:
   name: QA-Test
   demands:
   - agent.name -equals Payerportfolio
  dependsOn: Build
  jobs:
  - job: Deployment

    variables:
     ${{ if eq(parameters.trigger_type, 'EOS') }}:
      SPNum : ${{parameters.sprint_number}}
      Archfilename : mms-cms-cef.claims_administrator.EOS_$(SPNum).$(ReleaseVersion)-$(Build.BuildNumber)
     ${{ if eq(parameters.trigger_type, 'CI') }}:
      Archfilename : mms-cms-cef.claims_administrator.$(ReleaseVersion)-$(Build.BuildNumber)

    timeoutInMinutes: 0
    steps:
    - checkout: none
    - task: PowerShell@2
      inputs:
       targetType: 'inline'
       script: |
        $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$(AnsibleUserid):$(AnsiblePassword)")) }
      
        $job_template ="64"
      
         $body = @{
          extra_vars= @{
           soft_version="$(currentVersion)"
           } 
          limit = 'tag_Environment_DEV'
          credentials=@(
           9,
           36,
           37
           )    
         }| ConvertTo-Json
      
         $response = Invoke-RestMethod -Uri "https://awx.dev.mapshc.com/api/v2/job_templates/$($job_template)/launch/" -Method 'POST'-ContentType "application/json" -Body $body -Headers $AzureDevOpsAuthenicationHeader 
      
        write-host "The Job id is: $($response.job)"
      
        do {
      
         $responseStatus =Invoke-RestMethod -Uri "https://awx.dev.mapshc.com/api/v2/jobs/$($response.job)/" -Method 'GET' -ContentType "application/json" -Headers $AzureDevOpsAuthenicationHeader
         write-host $responseStatus.status
         Invoke-RestMethod -Uri "https://awx.dev.mapshc.com/api/v2/jobs/$($response.job)/stdout/?format=txt" -Method 'GET' -ContentType "application/json" -Headers $AzureDevOpsAuthenicationHeader
       
         } until ( ($responseStatus.status -ne 'running') -and ($responseStatus.status -ne 'pending') -and ($responseStatus.status -ne 'waiting'))
      
        write-host "Last status is: $($responseStatus.status)"
    - task: PowerShell@2
      inputs:
       targetType: 'inline'
       script: |
        $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$(AnsibleUserid):$(AnsiblePassword)")) }
      
        $job_template ="63"
      
        $body =@{
         extra_vars = @{
          artif_base_url ='https://gwproductengineering.jfrog.io/artifactory/mms-cms-cef-generic-dev'
          hpaPackageName="$($Archfilename)"
          message_store_database_server ='hpasdevsql001.dev.mapshc.com,8443'
          message_store_database_server_hipaa ='hpasdevsql001.dev.mapshc.com,8443'
          plan_event_database_server='hpasdevsql001.dev.mapshc.com,8443'
          security_database_server='hpasdevsql001.dev.mapshc.com,8443'
          connect_biz_talk_server= 'hpasdevweb01.dev.mapshc.com'
          manager_fqdn= "hpasdevbas02.dev.mapshc.com"
          }
         limit='tag_Environment_DEV'
         credentials=@(
           9,
           36,
           37
          )
         }| ConvertTo-Json
      
        $response = Invoke-RestMethod -Uri "https://awx.dev.mapshc.com/api/v2/job_templates/$($job_template)/launch/" -Method 'POST'-ContentType "application/json" -Body $body -Headers $AzureDevOpsAuthenicationHeader 
      
        write-host "The Job id is: $($response.job)"
      
        do {
      
         $responseStatus =Invoke-RestMethod -Uri "https://awx.dev.mapshc.com/api/v2/jobs/$($response.job)/" -Method 'GET' -ContentType "application/json" -Headers $AzureDevOpsAuthenicationHeader
         write-host $responseStatus.status
         Invoke-RestMethod -Uri "https://awx.dev.mapshc.com/api/v2/jobs/$($response.job)/stdout/?format=txt" -Method 'GET' -ContentType "application/json" -Headers $AzureDevOpsAuthenicationHeader
       
         } until ( ($responseStatus.status -ne 'running') -and ($responseStatus.status -ne 'pending') -and ($responseStatus.status -ne 'waiting'))
      
        write-host "Last status is: $($responseStatus.status)"
        if($responseStatus.status -ne 'successful')
        {
          exit 1
        }